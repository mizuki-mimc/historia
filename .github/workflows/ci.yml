name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Make bin scripts executable for scan_ruby
        run: chmod +x bin/*
      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  setup_js_env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean RubyGems Environment
        run: |
          # Bundlerのキャッシュディレクトリを削除
          rm -rf ~/.bundle/cache || true
          # setup-rubyアクションが使用する可能性のあるツールキャッシュを削除（より強力なクリーンアップ）
          sudo rm -rf /opt/hostedtoolcache/Ruby/* || true
          # GitHub ActionsのRubyセットアップアクションのキャッシュも明示的に削除を試みる
          # これは確実ではないが、試す価値あり
          sudo rm -rf "${{ runner.tool_cache }}/Ruby_*" || true
          gem pristine --all || true # 全てのGemをpristine（クリーンな状態）にする
        shell: bash
        continue-on-error: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Install Ruby Gems (explicitly for setup_js_env)
        run: bundle install --jobs 4 --retry 3
        shell: bash

      - name: Make bin scripts executable for setup_js_env
        run: chmod +x bin/*

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Debug - List installed gems (setup_js_env)
        run: bundle list --only-group default
        shell: bash

      - name: Debug - Check importmap-rails gem path (setup_js_env)
        run: bundle show importmap-rails
        shell: bash

      - name: Debug - Check Rails environment (setup_js_env)
        run: |
          bundle exec rails -v
          bundle exec rails about
        shell: bash

      - name: Run Importmap Install
        run: bundle exec rails importmap:install
        shell: bash

      - name: Upload Importmap Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: importmap-files
          path: |
            bin/importmap
            config/importmap.rb
            app/javascript/application.js
            vendor/javascript/
            Gemfile.lock # 必要に応じてGemfile.lockもアップロードするとより確実
          retention-days: 1

  scan_js_audit:
    runs-on: ubuntu-latest
    needs: setup_js_env
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Importmap Artifacts
        uses: actions/download-artifact@v5
        with:
          name: importmap-files
          path: . 

      - name: Set up Ruby (for scan_js_audit)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install Ruby Gems (for scan_js_audit)
        run: bundle install --jobs 4 --retry 3
        shell: bash

      - name: Make bin scripts executable (for scan_js_audit)
        run: chmod +x bin/* 

      - name: Setup Node.js (for scan_js_audit)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Debug - Check PATH
        run: echo $PATH
        shell: bash

      - name: Debug - Verify bin/importmap exists (scan_js_audit)
        run: ls -l bin/importmap || echo "bin/importmap not found!"
        shell: bash

      - name: Debug - Check Rails environment (scan_js_audit)
        run: |
          bundle exec rails -v
          bundle exec rails about
        shell: bash

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bundle exec bin/importmap audit
        shell: bash

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Make bin scripts executable for lint
        run: chmod +x bin/*
      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips postgresql-client
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true
      - name: Make bin scripts executable for test
        run: chmod +x bin/*
      - name: Create test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
        run: bin/rails db:create
      - name: Run database migrations for test environment
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432
        run: bin/rails db:migrate
      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [scan_ruby, scan_js_audit, lint, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Trigger Render Staging Deploy
        run: curl -X POST ${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}
